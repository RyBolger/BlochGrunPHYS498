import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt
import scipy.integrate as integrate 
import math

data = np.loadtxt('0T.txt')
temp = data[:, 0]
res = data[:, 1]


t = list(temp)
Res = list(res)


#plt.plot(t, Res, '.', ms=1)


ydata = []
dydata =[]
lim = 0.01
n = 5

#create BG function with parameters that will be optimised
def Bloch(temp, A, theta_r):
    ydata = []
    dydata = []
    lim = 0.01
    x2 = lambda temp: (temp**(n))/((math.exp(temp)-1) * (1-math.exp(-temp)))
    while lim <= theta_r:
        I = integrate.quad(x2, 0, lim)
        ydata.append(A*(temp/theta_r)**n * I[0])
        dydata.append(A*(temp/theta_r)**n * I[1])
        lim += theta_r/len(temp)
        return ydata
    
#estimate the parameters

A = 7*10**-4
theta_r = 230

#use curve fit to output optimised parameters into popt
popt, pcov = curve_fit(Bloch, temp, res, p0=[A,theta_r])
popt
A, theta_r = popt

#plotting experimental, estimated parameter and fitted data
plt.figure()
plt.plot(temp, res, 'k.', ms=1)
plt.plot(temp, ydata, 'b.', ms=1)
plt.plot(temp, Bloch(temp, *popt),'r.', ms=1)
