import sympy as sp
from sympy.functions.special.delta_functions import DiracDelta
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt 
import math
import symfit
from symfit import Variable, Parameter, parameters, Fit, Model, cosh
from symfit.contrib.interactive_guess import InteractiveGuess
import numpy as np
plt.ion()


data = np.loadtxt('PdSn4_010K_rhoData.txt')
xdata = np.array(data[:, 0])
rhoxx_exp = np.array(data[:, 1])
rhoxy_exp = np.array(data[:, 2])



def sigxy(B,n,mu):
    ydata = []   
    q = 1.6e-19
    R = -1 / (q*n)
    rho = 1 / (abs(n) * q * mu)
    for i in range (len(B)):
        ydata.append( - (R * B[i]) / (rho**2 + (R*B[i])**2) )
    return np.array(ydata)

def sigxx(B,n,mu):
    ydata = []   
    q = 1.6e-19
    R = -1 / (q*n)
    rho = 1 / (abs(n) * q * mu)
    for i in range (len(B)):
        ydata.append( rho / (rho**2 + (R*B[i])**2) )
    return np.array(ydata)
    


#Carrier Concentrations and Mobilities 
n1, n2, n3, n4 = 1.51e27, -1.519e27, 0.915e27, -1.047e27
mu1, mu2, mu3, mu4 = 1.41, 0.64, 0.087, 0.09

#Sum of Carriers Contribution
sigxy1 = sigxy(xdata, n1, mu1)
sigxy2 = sigxy(xdata, n2, mu2)
sigxy3 = sigxy(xdata, n3, mu3)
sigxy4 = sigxy(xdata, n4, mu4)
sigxy = (sigxy1 + sigxy2 + sigxy3 + sigxy4)

sigxx1 = sigxx(xdata, n1, mu1)
sigxx2 = sigxx(xdata, n2, mu2)
sigxx3 = sigxx(xdata, n3, mu3)
sigxx4 = sigxx(xdata, n4, mu4)
sigxx = (sigxx1 + sigxx2 + sigxx3 + sigxx4)

#resistivity tensor components
rhoxx = sigxx / (sigxx**2 + sigxy**2)
rhoxy = - sigxy / (sigxx**2 +sigxy**2)

#ionized impurity scattering for rhoxx
def IIS(B,a,f):
    ydata = []    
    for i in range (len(B)):
        ydata.append( a / (np.cosh(B[i]/f)) )
    return np.array(ydata)

#IIS constant
a = 1.1513
f = 0.992

#IIS magnetoresistance contribution
rho_IIS = rhoxx * IIS(xdata,a,f)

#total longitudinal magnetoresistance
rhoxx_tot = rhoxx + rho_IIS

f = plt.figure(figsize=(15,15))
ax = f.add_subplot(211)
plt.xlabel("Magnetic Field [T]")
plt.ylabel("Rho$_{xx}$")
plt.plot(xdata, rhoxx_exp, 'k.')
plt.plot(xdata, rhoxx, 'r-')
plt.plot(xdata, rhoxx_tot, 'b-')
plt.xlim([0,8])


ax2 = f.add_subplot(212)
plt.xlabel("Magnetic Field [T]")
plt.ylabel("Rho$_{xy}$")
plt.plot(xdata, rhoxy_exp, 'k.')
plt.plot(xdata, rhoxy, 'r-')
plt.xlim([0,8])

plt.show()

B = Variable('B')
rhoXXModel = Variable('y1')
rhoXYModel = Variable('y2')
n_1 = Parameter('n1', value=1.58e21, min=0.9e21, max=1.6e21)
n_2 = Parameter('n2', value=1.52e21, min=0.9e21, max=1.6e21)
n_3 = Parameter('n3', value=0.92e21, min=0.9e21, max=1.6e21)
n_4 = Parameter('n4', value=1.05e21, min=0.9e21, max=1.6e21)
mu_1 = Parameter('mu1', value=1.46e4, min=0.08e4, max=1.5e4)
mu_2 = Parameter('mu2', value=0.66e4, min=0.08e4, max=1.5e4)
mu_3 = Parameter('mu3', value=0.08e4, min=0.08e4, max=1.5e4)
mu_4 = Parameter('mu4', value=0.09e4, min=0.08e4, max=1.5e4)

a = 1.1513
f = 0.992
q = 1.6e-19

R1 = -1 / (q*n_1)
R2 = -1 / (q*n_2)
R3 = -1 / (q*n_3)
R4 = -1 / (q*n_4)

rho1 = 1 / (abs(n_1) * q * mu_1)
rho2 = 1 / (abs(n_2) * q * mu_2)
rho3 = 1 / (abs(n_3) * q * mu_3)
rho4 = 1 / (abs(n_4) * q * mu_4)
    
dictionary = {

    y1: ((((( rho1 / (rho1**2 + (R1*B)**2) )* (1/(( rho1 / (rho1**2 + (R1*B)**2) )**2) + 
                                          (- (R1 * B) / (rho1**2 + (R1*B)**2))**2)) + 
                                              (a/cosh(B/f))) 
          /  ((- (R1 * B) / (rho1**2 + (R1*B)**2) )**2 + (rho1 / (rho1**2 + (R1*B)**2))**2))
    +
    (((( rho2 / (rho2**2 + (R2*B)**2) )* (1/(( rho2 / (rho2**2 + (R2*B)**2) )**2) + 
                                          (- (R2 * B) / (rho2**2 + (R2*B)**2))**2)) + 
                                              (a/cosh(B/f)))
         /  ((- (R2 * B) / (rho2**2 + (R2*B)**2) )**2 + (rho2 / (rho2**2 + (R2*B)**2))**2))
    +
    (((( rho3 / (rho3**2 + (R3*B)**2) )* (1/(( rho3 / (rho3**2 + (R3*B)**2) )**2) + 
                                          (- (R3 * B) / (rho3**2 + (R3*B)**2))**2)) + 
                                              (a/cosh(B/f)))
        /  ((- (R3 * B) / (rho3**2 + (R3*B)**2) )**2 + (rho3 / (rho3**2 + (R3*B)**2))**2))
    +
    (((( rho4 / (rho4**2 + (R4*B)**2) )* (1/(( rho4 / (rho4**2 + (R4*B)**2) )**2) + 
                                          (- (R4 * B) / (rho4**2 + (R4*B)**2))**2)) + 
                                              (a/cosh(B/f))) 
    /  ((- (R4 * B) / (rho4**2 + (R4*B)**2) )**2 + (rho4 / (rho4**2 + (R4*B)**2))**2))),
    
    #(1 / (abs(n) * q * mu)) / ((1 / (abs(n) * q * mu))**2 + (-B / (q*n))**2) *
     #   (1 / (((1 / (abs(n) * q * mu)) / ((1 / (abs(n) * q * mu))**2 + (-B / (q*n))**2))**2 + 
      #  ((-B / (q*n)) / ((1 / (abs(n) * q * mu))**2 + (-B / (q*n))**2))**2)) + 
       # (a / cosh(B / f)) ,
       
    y2: (-((-(- (R1 * B) / (rho1**2 + (R1*B)**2)) * ((1/((( rho1 / (rho1**2 + (R1*B)**2) )**2) + 
                                          (- (R1 * B) / (rho1**2 + (R1*B)**2))**2)))
           / ((- (R1 * B) / (rho1**2 + (R1*B)**2) )**2 + (rho1 / (rho1**2 + (R1*B)**2))**2))
    
    +
    (-(- (R2 * B) / (rho2**2 + (R2*B)**2)) * ((1/((( rho2 / (rho2**2 + (R2*B)**2) )**2) + 
                                          (- (R2 * B) / (rho2**2 + (R2*B)**2))**2)))
          / ((- (R2 * B) / (rho2**2 + (R2*B)**2) )**2 + (rho2 / (rho2**2 + (R2*B)**2))**2))
    
    +
    (-(- (R3 * B) / (rho3**2 + (R3*B)**2)) * ((1/((( rho3 / (rho3**2 + (R3*B)**2) )**2) + 
                                          (- (R3 * B) / (rho3**2 + (R3*B)**2))**2)))
    / ((- (R3 * B) / (rho3**2 + (R3*B)**2) )**2 + (rho3 / (rho3**2 + (R3*B)**2))**2))
    
    +
    (-(- (R4 * B) / (rho4**2 + (R4*B)**2)) * ((1/((( rho4 / (rho4**2 + (R4*B)**2) )**2) + 
                                          (- (R4 * B) / (rho4**2 + (R4*B)**2))**2))))
    
    / ((- (R4 * B) / (rho4**2 + (R4*B)**2) )**2 + (rho4 / (rho4**2 + (R4*B)**2))**2)))
    
    #- ((-B / (q*n)) / ((1 / (abs(n) * q * mu))**2 + (-B / (q*n))**2)) * 
     #     (1 / (((1 / (abs(n) * q * mu)) / ((1 / (abs(n) * q * mu))**2 + (-B / (q*n))**2))**2 + 
      #    ((-B / (q*n)) / ((1 / (abs(n) * q * mu))**2 + (-B / (q*n))**2))**2))
}

model = Model(dictionary)
#print(model)
#####get this bloch working#####
model_sim = model(B=xdata, n1=n1, n2=n2, n3=n3, n4=n4, mu1=mu1, mu2=mu2, mu3=mu3, mu4=mu4)
#print(data)
rho_xx_sim = model_sim.y1
rho_xy_sim = model_sim.y2
plt.plot(xdata,rho_xx_sim)
plt.show

#fit = Fit(model, B=xdata, y1=rhoxx, y2=rhoxy)
#fit_result = fit.execute()
#y1result, y2result = fit.model(B=xdata, **fit_result.params)
#plt.figure()
#plt.plot(xdata, y1)
#plt.firgure()
#plt.plot(xdata, y2)
